The

family of functions produces output according to a

as described below. The

and

functions write output to

the standard output stream;

and

write output to the given output

and

write output to the given file descriptor;

and

write to the character string

and

and

dynamically allocate a new string with

These functions write the output under the control of a

string that specifies how subsequent arguments (or arguments accessed via the variable&#45;length argument facilities of

are converted for output.

The

and

functions set

to be a pointer to a buffer sufficiently large to hold the formatted string. This pointer should be passed to

to release the allocated storage when it is no longer needed. If sufficient space cannot be allocated,

and

will return &#45;1 and set

to be a

pointer.

The

and

functions will write at most

of the characters printed into the output string (the

character then gets the terminating

if the return value is greater than or equal to the

argument, the string was too short and some of the printed characters were discarded. The output is always null&#45;terminated, unless

is 0.

The

and

functions effectively assume a

of

The format string is composed of zero or more directives: ordinary characters (not

which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments. Each conversion specification is introduced by the

character. The arguments must correspond properly (after type promotion) with the conversion specifier. After the

the following appear in sequence:

An optional field, consisting of a decimal digit string followed by a

specifying the next argument to access. If this field is not provided, the argument following the last argument accessed will be used. Arguments are numbered starting at

If unaccessed arguments in the format string are interspersed with ones that are accessed the results will be indeterminate.

Zero or more of the following flags:

The value should be converted to an

For

and

conversions, this option has no effect. For

conversions, the precision of the number is increased to force the first character of the output string to a zero. For

and

conversions, a non&#45;zero result has the string

(or

for

conversions) prepended to it. For

and

conversions, the result will always contain a decimal point, even if no digits follow it (normally, a decimal point appears in the results of those conversions only if a digit follows). For

and

conversions, trailing zeros are not removed from the result as they would otherwise be.

Zero padding. For all conversions except

the converted value is padded on the left with zeros rather than blanks. If a precision is given with a numeric conversion

and

the

flag is ignored.

A negative field width flag; the converted value is to be left adjusted on the field boundary. Except for

conversions, the converted value is padded on the right with blanks, rather than on the left with blanks or zeros. A

overrides a

if both are given.

A blank should be left before a positive number produced by a signed conversion

or

A sign must always be placed before a number produced by a signed conversion. A

overrides a space if both are used.

Decimal conversions

or

or the integral portion of a floating point conversion

or

should be grouped and separated by thousands using the non&#45;monetary separator returned by

An optional decimal digit string specifying a minimum field width. If the converted value has fewer characters than the field width, it will be padded with spaces on the left (or right, if the left&#45;adjustment flag has been given) to fill out the field width.

An optional precision, in the form of a period

followed by an optional digit string. If the digit string is omitted, the precision is taken as zero. This gives the minimum number of digits to appear for

and

conversions, the number of digits to appear after the decimal&#45;point for

and

conversions, the maximum number of significant digits for

and

conversions, or the maximum number of characters to be printed from a string for

conversions.

An optional length modifier, that specifies the size of the argument. The following length modifiers are valid for the

or

conversion:

Note: the

modifier, when applied to a

or

conversion, indicates that the argument is of an unsigned type equivalent in size to a

The

modifier, when applied to a

or

conversion, indicates that the argument is of a signed type equivalent in size to a

Similarly, when applied to an

conversion, it indicates that the argument is a pointer to a signed type equivalent in size to a

The following length modifier is valid for the

or

conversion:

(ignored, same behavior as without it)

The following length modifier is valid for the

or

conversion:

A character that specifies the type of conversion to be applied.

A field width or precision, or both, may be indicated by an asterisk

or an asterisk followed by one or more decimal digits and a

instead of a digit string. In this case, an

argument supplies the field width or precision. A negative field width is treated as a left adjustment flag followed by a positive field width; a negative precision is treated as though it were missing. If a single format directive mixes positional

and non&#45;positional arguments, the results are undefined.

The conversion specifiers and their meanings are:

The

(or appropriate variant) argument is converted to signed decimal

and

unsigned octal

unsigned decimal

or unsigned hexadecimal

and

notation. The letters

are used for

conversions; the letters

are used for

conversions. The precision, if any, gives the minimum number of digits that must appear; if the converted value requires fewer digits, it is padded on the left with zeros.

The

argument is converted to signed decimal, unsigned octal, or unsigned decimal, as if the format had been

or

respectively. These conversion characters are deprecated, and will eventually disappear.

The

argument is rounded and converted in the style

where there is one digit before the decimal&#45;point character and the number of digits after it is equal to the precision; if the precision is missing, it is taken as 6; if the precision is zero, no decimal&#45;point character appears. An

conversion uses the letter

(rather than

to introduce the exponent. The exponent always contains at least two digits; if the value is zero, the exponent is 00.

For

and

conversions, positive and negative infinity are represented as

and

respectively when using the lowercase conversion character, and

and

respectively when using the uppercase conversion character. Similarly, NaN is represented as

when using the lowercase conversion, and

when using the uppercase conversion.

The

argument is rounded and converted to decimal notation in the style

where the number of digits after the decimal&#45;point character is equal to the precision specification. If the precision is missing, it is taken as 6; if the precision is explicitly zero, no decimal&#45;point character appears. If a decimal point appears, at least one digit appears before it.

The

argument is converted in style

or

(or

or

for

conversions). The precision specifies the number of significant digits. If the precision is missing, 6 digits are given; if the precision is zero, it is treated as 1. Style

is used if the exponent from its conversion is less than &#45;4 or greater than or equal to the precision. Trailing zeros are removed from the fractional part of the result; a decimal point appears only if it is followed by at least one digit.

The

argument is rounded and converted to hexadecimal notation in the style

where the number of digits after the hexadecimal&#45;point character is equal to the precision specification. If the precision is missing, it is taken as enough to represent the floating&#45;point number exactly, and no rounding occurs. If the precision is zero, no hexadecimal&#45;point character appears. The

is a literal character

and the exponent consists of a positive or negative sign followed by a decimal number representing an exponent of 2. The

conversion uses the prefix

(rather than

the letters

(rather than

to represent the hex digits, and the letter

(rather than

to separate the mantissa and exponent.

Note that there may be multiple valid ways to represent floating&#45;point numbers in this hexadecimal format. For example,

and

are all equivalent.

and later always prints finite non&#45;zero numbers using

as the digit before the hexadecimal point. Zeroes are always represented with a mantissa of 0 (preceded by a

if appropriate) and an exponent of

Treated as

with the

(ell) modifier.

The

argument is converted to an

and the resulting character is written.

If the

(ell) modifier is used, the

argument shall be converted to a

and the (potentially multi&#45;byte) sequence representing the single wide character is written, including any shift sequences. If a shift sequence is used, the shift state is also restored to the original state after the character.

Treated as

with the

(ell) modifier.

The

argument is expected to be a pointer to an array of character type (pointer to a string). Characters from the array are written up to (but not including) a terminating

character; if a precision is specified, no more than the number specified are written. If a precision is given, no null character need be present; if the precision is not specified, or is greater than the size of the array, the array must contain a terminating

character.

If the

(ell) modifier is used, the

argument is expected to be a pointer to an array of wide characters (pointer to a wide string). For each wide character in the string, the (potentially multi&#45;byte) sequence representing the wide character is written, including any shift sequences. If any shift sequence is used, the shift state is also restored to the original state after the string. Wide characters from the array are written up to (but not including) a terminating wide

character; if a precision is specified, no more than the number of bytes specified are written (including shift sequences). Partial characters are never written. If a precision is given, no null character need be present; if the precision is not specified, or is greater than the number of bytes required to render the multibyte representation of the string, the array must contain a terminating wide

character.

The

pointer argument is printed in hexadecimal (as if by

or

The number of characters written so far is stored into the integer indicated by the

(or variant) pointer argument. No argument is converted.

Print the string representation of the error code stored in the

variable at the beginning of the call, as returned by

No argument is taken.

A

is written. No argument is converted. The complete conversion specification is

The decimal point character is defined in the program's locale (category

In no case does a non&#45;existent or small field width cause truncation of a numeric field; if the result of a conversion is wider than the field width, the field is expanded to contain the conversion result.

These functions return the number of characters printed (not including the trailing

used to end output to strings), except for

and

which return the number of characters that would have been printed if the

were unlimited (again, not including the final

These functions return a negative value if an error occurs.

To print a date and time in the form

where

and

are pointers to strings:

#include &lt;stdio.h&gt; fprintf(stdout, &quot;%s, %s %d, %.2d:%.2d\n&quot;, weekday, month, day, hour, min);

To print to five decimal places:

#include &lt;math.h&gt; #include &lt;stdio.h&gt; fprintf(stdout, &quot;pi = %.5f\n&quot;, 4 &#42; atan(1.0));

To allocate a 128 byte string and print into it:

#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;stdarg.h&gt; char &#42;newfmt(const char &#42;fmt, ...) { char &#42;p; va&#95;list ap; if ((p = malloc(128)) == NULL) return (NULL); va&#95;start(ap, fmt); (void) vsnprintf(p, 128, fmt, ap); va&#95;end(ap); return (p); }

The conversion formats

and

are not standard and are provided only for backward compatibility. The conversion format

is also not standard and provides the popular extension from the

library.

The effect of padding the

format with zeros (either by the

flag or by specifying a precision), and the benign effect (i.e., none) of the

flag on

and

conversions, as well as other nonsensical combinations such as

are not standard; such combinations should be avoided.

In addition to the errors documented for the

system call, the

family of functions may fail if:

An invalid wide character code was encountered.

Insufficient storage space is available.

The

argument exceeds

or the return value would be too large to be represented by an

Subject to the caveats noted in the

section below, the

and

functions conform to

and

With the same reservation, the

and

functions conform to

while

and

conform to

The functions

and

first appeared in the

library. These were implemented by

in

but were later replaced with a different implementation from

by

The

and

functions were added in

The

format extension first appeared in the

library, and was implemented in

The

family of functions do not correctly handle multibyte characters in the

argument.

The

and

functions are easily misused in a manner which enables malicious users to arbitrarily change a running program's functionality through a buffer overflow attack. Because

and

assume an infinitely long string, callers must be careful not to overflow the actual space; this is often hard to assure. For safety, programmers should use the

interface instead. For example:

void foo(const char &#42;arbitrary&#95;string, const char &#42;and&#95;another) { char onstack[8];

#ifdef BAD /&#42; &#42; This first sprintf is bad behavior. Do not use sprintf! &#42;/ sprintf(onstack, &quot;%s, %s&quot;, arbitrary&#95;string, and&#95;another); #else /&#42; &#42; The following two lines demonstrate better use of &#42; snprintf(). &#42;/ snprintf(onstack, sizeof(onstack), &quot;%s, %s&quot;, arbitrary&#95;string, and&#95;another); #endif }

The

and

family of functions are also easily misused in a manner allowing malicious users to arbitrarily change a running program's functionality by either causing the program to print potentially sensitive data

or causing it to generate a memory fault or bus error by dereferencing an invalid pointer.

can be used to write arbitrary data to potentially carefully&#45;selected addresses. Programmers are therefore strongly advised to never pass untrusted strings as the

argument, as an attacker can put format specifiers in the string to mangle your stack, leading to a possible security hole. This holds true even if the string was built using a function like

as the resulting string may still contain user&#45;supplied conversion specifiers for later interpolation by

Always use the proper secure idiom:

